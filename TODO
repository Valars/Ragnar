Ce qu'il faut faire

TODO :
    - Définir les IA de chaque type de cellule (fournisseur, rusher, attaquant) - En cours (fournisseur presque fini)

    
    




###### rien à voir #######
CADENCES DE PRODUCTION : #
I = 0.5unité/sec         #
II = 2/3 d'unité/sec     #
III = 1u/sec             #
##########################


        /!\ JE MET A JOUR CE QUE JE FAIT VRAIMENT EN TEMPS REEL /!\ -Virgile 
        comprendre si un truc n'est plus présent dans la liste, c'est que je l'ai fait --"
A coder:
    
    -  (Guillaume) Ajouter la structure dans noeud avec les plus courts chemins pour chaque noeud !
        Nom : initDistances(Partie)
       En cours : Essai d'algorithme de routage par vecteur de distance.
        ==> J'essaye de pondre ça pour dimanche dernier délai (\o/)
        
        Notes perso:
        Pour mon algo semble marcher correctement et a une faible complexité :
        
        Si on procède avec l'algo de Dijsktra : ( n:nbNoeuds, m:nbAretes)
                Le plus court chemin de A à B : O( (m+n)*ln(n) )
                => Pour chaque voisin de A : O ( (n-1)*(m+n)*ln(n) )
                => Pour chaque noeud du graphe : O( n*(n-1)*(m+n)*ln(n) )
        
        Avec mon algo de routage, si je ne me trompe pas : O(n + n² + 2n^3)
        
        Si on compare sur un graphe de 10 noeuds et 20 aretes :
                - Dijkstra : env 6000 opérations
                - Moi : env 2000 opérations
        
        ==> Donc à priori, mon algo de routage est plus rapide. 
        Je continue de tester tout ça et je vous le montre dès que je pense que ça tient la route !
    -Coder l'ia fournisseur en fonction du pseudo code cf file IAFournisseur