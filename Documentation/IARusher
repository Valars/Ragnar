pour chaque rusher :
    si le rusher not in listeDesCellulesEnDanger :
        
        
        pour chaque voisin :
            s'il est neutre :
                diff = doitEnvoyerpourcapturer le neutre
                si diff >= 0 et peutEnvoyer(rusher) > diff :
                    s'il est de degré 1 :
                        ajouter à la liste des noeuds de degré1 et diff
                    sinon :
                        ajouter a la liste des neutres à capturer et diff
        
        si len(listedesneutresdedegré1) > 0 :
            si len(cette liste) > 1 :
                cherche le plus rentable des neutres de degré 1 #voir fonction du dessous
                envoyer vers ce neutre de degré 1
                return
            else :
                envoyer au seul neutre de degré 1
                return
        else :
            si len(listeDesAutresNeutres) > 1
                chercher le plus rentable des noeuds pas de degré1 # voir fonction du dessous
                envoyer vers ce noeud
                return
            sinon :
                envoyer au seul neutre de la liste
                return
        
        
        ####################################################################################################################
        
    ####fonction : chercher le noeud le plus rentable dans une liste de neutres###
    
    
        noeudleplusrentable = lesNeutres[0]
        pour neutre1 in listeNeutres :
            pour neutre2  in listeNeutres :
                if neutre1 != neutre2 :
                    noeudLoin = neutre1 if distance(rusher,neutre1) > distance(rusher,neutre2) else neutre2
                    noeudProche = neutre1 if distance(rusher,neutre2) >= distance(rusher,neutre1) else neutre2
                    
                    
                    marge = max(prod1,prod2)-min(prod1,prod2)
                    diffDistance == distance(rusher,noeudLoin) - distance(rusher,noeudProche)
                    
                    if diffDistance == 0 :
                        noeudleplurentable = noeudLoin if noeudLoin.prod > noeudProche.prod else noeudProche
                        
                    else if diffDistance <= distance(rusher,noeudProche)*marge :
                        #aller voir le noeud le plus loin
                        noeudleplusrentable = noeudLoin
                    else :
                        noeudleplusrentable = noeudProche

        
        